---
import { t, type Language, translations } from '../i18n/utils';

export interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const translate = t(lang);

// Direct access to translation data for complex objects
const translationData = translations[lang];

// Get the versions from translations
const versions = [
  '1.6.2',
  '1.6.1',
  '1.6.0',
  '1.5.0',
  '1.4.2',
  '1.4.1',
  '1.4.0',
  '1.3.5',
  '1.3.4',
  '1.3.3',
  '1.3.2',
  '1.3.1',
  '1.3.0',
  '1.2.0',
  '1.1.0',
  '1.0.0',
];
---

<section id="changelog" class="py-20 bg-white">
  <div class="max-w-4xl mx-auto px-6">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-serif font-semibold text-secondary-900 mb-4">
        {translate('changelog.title')}
      </h2>
      <p class="text-xl text-secondary-600 max-w-2xl mx-auto">
        {translate('changelog.subtitle')}
      </p>
    </div>

    <!-- Changelog Versions -->
    <div class="space-y-8">
      {
        versions
          .map(version => {
            // Direct access to version data
            const versionData =
              translationData?.changelog?.versions?.[
                version as keyof typeof translationData.changelog.versions
              ];

            // Check if version data exists and has required structure
            if (
              !versionData ||
              !versionData.title ||
              !versionData.changes ||
              !Array.isArray(versionData.changes)
            ) {
              return null; // Skip if data doesn't exist or is invalid
            }

            return (
              <div class="bg-white rounded-2xl border border-secondary-200 overflow-hidden">
                <div
                  class="changelog-toggle w-full px-8 py-6 text-left flex items-center justify-between hover:bg-secondary-50 transition-colors duration-200 cursor-pointer"
                  data-target={`changelog-${version}`}
                >
                  <div class="flex items-center space-x-4">
                    <h3 class="text-xl font-semibold text-secondary-900">{versionData.title}</h3>
                    <span class="px-3 py-1 bg-primary-100 text-primary-700 rounded-full text-sm font-medium">
                      {versionData.date}
                    </span>
                  </div>
                  <div class="changelog-icon flex-shrink-0 w-6 h-6 text-primary-600 transform transition-transform duration-200">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 6v12m6-6H6"
                      />
                    </svg>
                  </div>
                </div>
                <div
                  id={`changelog-${version}`}
                  class="changelog-content max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
                >
                  <div class="px-8 pb-6">
                    <ul class="space-y-3">
                      {versionData.changes.map((change: string) => (
                        <li class="flex items-start space-x-3">
                          <div class="flex-shrink-0 w-1.5 h-1.5 bg-primary-500 rounded-full mt-3" />
                          <p class="text-secondary-600 leading-relaxed flex-1">{change}</p>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            );
          })
          .filter(Boolean)
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const toggles = document.querySelectorAll<HTMLDivElement>('.changelog-toggle');

    toggles.forEach(toggle => {
      toggle.addEventListener('click', function (this: HTMLDivElement) {
        const target = this.getAttribute('data-target');
        const content = target ? document.getElementById(target) : null;
        const icon = this.querySelector<HTMLDivElement>('.changelog-icon');

        // Close all other changelog items
        toggles.forEach(otherToggle => {
          if (otherToggle !== this) {
            const otherTarget = otherToggle.getAttribute('data-target');
            const otherContent = otherTarget ? document.getElementById(otherTarget) : null;
            const otherIcon = otherToggle.querySelector<HTMLDivElement>('.changelog-icon');

            if (otherContent && otherContent instanceof HTMLElement) {
              otherContent.style.maxHeight = '0';
              otherContent.classList.remove('open');
            }
            if (otherIcon && otherIcon instanceof HTMLElement) {
              (otherIcon as HTMLElement).style.transform = 'rotate(0deg)';
            }
          }
        });

        // Toggle current changelog item
        if (content && content instanceof HTMLElement) {
          if (content.classList.contains('open')) {
            // Close
            content.style.maxHeight = '0';
            content.classList.remove('open');
            if (icon && icon instanceof HTMLElement) {
              (icon as HTMLElement).style.transform = 'rotate(0deg)';
            }
          } else {
            // Open
            content.style.maxHeight = content.scrollHeight + 'px';
            content.classList.add('open');
            if (icon && icon instanceof HTMLElement) {
              (icon as HTMLElement).style.transform = 'rotate(45deg)';
            }
          }
        }
      });
    });
  });
</script>

<style>
  .changelog-content.open {
    max-height: none !important;
  }

  .changelog-toggle:focus {
    outline: none;
  }

  .changelog-toggle:focus-visible {
    outline: 2px solid #16a34a;
    outline-offset: 2px;
  }

  .changelog-icon {
    transition: transform 0.2s ease-in-out;
  }
</style>
